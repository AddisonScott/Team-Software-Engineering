<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VolatilePhysics</name>
    </assembly>
    <members>
        <member name="M:Volatile.VoltWorld.GetOccludingDistance(Volatile.VoltRayCast,System.Int32)">
            <summary>
            Gets the distance to the closest occluder for the given ray.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.TestTargets(Volatile.VoltRayCast,Volatile.VoltExplosionCallback,System.Int32,System.Single,System.Single)">
            <summary>
            Tests all valid explosion targets for a given ray.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.PopulateFiltered(Volatile.Vector2,System.Single,Volatile.VoltBodyFilter,System.Int32,Volatile.VoltBuffer{Volatile.VoltBody}@)">
            <summary>
            Finds all dynamic bodies that overlap with the explosion AABB
            and pass the target filter test. Does not test actual shapes.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.DeltaTime">
            <summary>
            Fixed update delta time for body integration. 
            Defaults to Config.DEFAULT_DELTA_TIME.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.IterationCount">
            <summary>
            Number of iterations when updating the world.
            Defaults to Config.DEFAULT_ITERATION_COUNT.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.HistoryLength">
            <summary>
            How many frames of history this world is recording.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreatePolygonWorldSpace(Volatile.Vector2[],System.Single,System.Single,System.Single)">
            <summary>
            Creates a new polygon shape from world-space vertices.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreatePolygonBodySpace(Volatile.Vector2[],System.Single,System.Single,System.Single)">
            <summary>
            Creates a new polygon shape from body-space vertices.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateCircleWorldSpace(Volatile.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new circle shape from a world-space origin.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateStaticBody(Volatile.Vector2,System.Single,Volatile.VoltShape[])">
            <summary>
            Creates a new static body and adds it to the world.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateDynamicBody(Volatile.Vector2,System.Single,Volatile.VoltShape[])">
            <summary>
            Creates a new dynamic body and adds it to the world.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.AddBody(Volatile.VoltBody,Volatile.Vector2,System.Single)">
            <summary>
            Adds a body to the world. Used for reintroducing bodies that 
            have been removed. For new bodies, use CreateBody.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.RemoveBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the world. The body will be partially reset so it
            can be added later. The pointer is still valid and the body can be
            returned to the world using AddBody.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.DestroyBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the world and deallocates it. The pointer is
            invalid after this point.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.Update">
            <summary>
            Ticks the world, updating all dynamic bodies and resolving collisions.
            If a frame number is provided, all dynamic bodies will store their
            state for that frame for later testing.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.Update(Volatile.VoltBody,System.Boolean)">
            <summary>
            Updates a single body, resolving only collisions with that body.
            If a frame number is provided, all dynamic bodies will store their
            state for that frame for later testing.
            
            Note: This function is best used with dynamic collisions disabled, 
            otherwise you might get symmetric duplicates on collisions.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.QueryPoint(Volatile.Vector2,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Finds all bodies containing a given point.
            
            Subsequent calls to other Query functions (Point, Circle, Bounds) will
            invalidate the resulting enumeration from this function.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.QueryCircle(Volatile.Vector2,System.Single,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Finds all bodies intersecting with a given circle.
            
            Subsequent calls to other Query functions (Point, Circle, Bounds) will
            invalidate the resulting enumeration from this function.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Performs a raycast on all world bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CircleCast(Volatile.VoltRayCast@,System.Single,Volatile.VoltRayResult@,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Performs a circle cast on all world bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.BroadPhase">
            <summary>
            Identifies collisions for all bodies, ignoring symmetrical duplicates.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.BroadPhase(Volatile.VoltBody,System.Boolean)">
            <summary>
            Identifies collisions for a single body. Does not keep track of 
            symmetrical duplicates (they could be counted twice).
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.NarrowPhase(Volatile.VoltShape,Volatile.VoltShape)">
            <summary>
            Creates a manifold for two shapes if they collide.
            </summary>
        </member>
        <member name="T:Volatile.Axis">
             <summary>
             The Axis data structure represents a "slab" between the given edge and
             a parallel edge drawn at the origin. The "width" value gives the width
             of that axis slab, defined as follows: For an edge AB with normal N, 
             this width w is given by Dot(A, N). If you take edge AB, and draw an 
             edge CD parallel to AB that intersects the origin, the width w is equal
             to the minimum distance between edges AB and CD.
            
                         |
                         |     C
                         |    /
                         |   /           A
                         |  /ヽ         /
                         | /   ヽ      /
                         |/    w ヽ   /
              -----------+---------ヽ/----
                        /|          /
                       D |         /
                         |        /
                         |       B
                         |
                         
             </summary>
        </member>
        <member name="T:Volatile.TreeBroadphase">
             <summary>
             A dynamic tree bounding volume hierarchy used for collision detection.
             Does not support raycasts (for now) as they would not be compatible with
             Volatile's historical raycast capability -- no past-step data is preserved
             in this tree.
             
             Bounding AABBs are expanded to allow for movement room according to
             the VoltConfig.AABB_EXTENSION setting.
            
             Nodes are pooled and relocatable, so we use node indices rather than pointers.
             </summary>
        </member>
        <member name="T:Volatile.TreeBroadphase.Node">
            <summary>
            A node in the dynamic tree.
            </summary>
        </member>
        <member name="F:Volatile.TreeBroadphase.Node.aabb">
            <summary>
            Expanded AABB.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.Height">
            <summary>
            Compute the height of the binary tree in O(N) time.
            Should not be called often.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.AreaRatio">
            <summary>
            Get the ratio of the sum of the node areas to the root area.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.MaxBalance">
            <summary>
            Get the maximum balance of an node in the tree. The balance is the
            difference in height of the two children of a node.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ComputeHeight">
            <summary>
            Compute the height of the entire tree.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.AddBody(Volatile.VoltBody)">
            <summary>
            Adds a body to the tree.     
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.RemoveBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the tree.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.UpdateBody(Volatile.VoltBody)">
            <summary>
            Updates a body's position. If the body has moved outside of its
            expanded AABB, then the body is removed from the tree and re-inserted.
            Otherwise the function returns immediately.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ExpandChild(System.Int32,Volatile.VoltBuffer{Volatile.VoltBody})">
            <summary>
            If the node is a leaf, we do not test the actual proxy bounding box.
            This is redundant since we will be testing the body's bounding box in
            the first step of the narrowphase, and the two are almost equivalent.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.Balance(System.Int32)">
            <summary>
            Perform a left or right rotation if node A is imbalanced.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ComputeHeight(System.Int32)">
            <summary>
            Compute the height of a sub-tree.
            </summary>
        </member>
        <member name="T:Volatile.CheapList`1">
            <summary>
            A very loose partial encapsulation of a list array. Supports fast item
            at end, and fast arbitrary element removal. Does not guarantee order.
            </summary>
        </member>
        <member name="M:Volatile.CheapList`1.Add(`0)">
            <summary>
            Adds a new element to the end of the list. Returns the index of the
            newly-indexed object.
            </summary>
        </member>
        <member name="M:Volatile.CheapList`1.Remove(`0)">
            <summary>
            Removes the element by swapping it for the last element in the list.
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestPointCircleSimple(Volatile.Vector2,Volatile.Vector2,System.Single)">
            <summary>
            Simple check for point-circle containment.
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestCircleCircleSimple(Volatile.Vector2,Volatile.Vector2,System.Single,System.Single)">
            <summary>
            Simple check for two overlapping circles.
            </summary>
        </member>
        <member name="M:Volatile.Collision.CircleRayCast(Volatile.VoltShape,Volatile.Vector2,System.Single,Volatile.VoltRayCast@,Volatile.VoltRayResult@)">
            <summary>
            Checks a ray against a circle with a given origin and square radius.
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindAxisShortestDistance(Volatile.Vector2,Volatile.Axis[],System.Single@)">
            <summary>
            Returns the index of the nearest axis on the poly to a point.
            Outputs the minimum distance between the axis and the point.
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindAxisMaxPenetration(Volatile.Vector2,System.Single,Volatile.VoltPolygon,System.Single@)">
            <summary>
            Returns the index of the axis with the max circle penetration depth.
            Breaks out if a separating axis is found between the two shapes.
            Outputs the penetration depth of the circle in the axis (if any).
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestCircles(Volatile.VoltWorld,Volatile.VoltCircle,Volatile.VoltShape,Volatile.Vector2,System.Single)">
            <summary>
            Workhorse for circle-circle collisions, compares origin distance
            to the sum of the two circles' radii, returns a Manifold.
            </summary>
            
        </member>
        <member name="M:Volatile.Collision.FindVerts(Volatile.VoltPolygon,Volatile.VoltPolygon,Volatile.Vector2,System.Single,Volatile.Manifold)">
            <summary>
            Add contacts for penetrating vertices. Note that this does not handle
            cases where an overlap was detected, but no vertices fall inside the
            opposing polygon (like a Star of David). For this we have a fallback.
            
            See http://chipmunk-physics.googlecode.com/svn/trunk/src/cpCollision.c
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindVertsFallback(Volatile.VoltPolygon,Volatile.VoltPolygon,Volatile.Vector2,System.Single,Volatile.Manifold)">
            <summary>
            A fallback for handling degenerate "Star of David" cases.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.Store(Volatile.HistoryRecord)">
            <summary>
            Stores a value as latest.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.TryGet(System.Int32,Volatile.HistoryRecord@)">
            <summary>
            Tries to get a value with a given number of frames behind the last 
            value stored. If the value can't be found, this function will find
            the closest and return false, indicating a clamp.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.GetValues">
            <summary>
            Returns all values, but not in order.
            </summary>
        </member>
        <member name="T:Volatile.HistoryRecord">
            <summary>
            A stored historical image of a past body state, used for historical
            queries and raycasts. Rather than actually rolling the body back to
            its old position (expensive), we transform the ray into the body's
            local space based on the body's old position/axis. Then all casts
            on shapes use the local-space ray (this applies both for current-
            time and past-time raycasts and point queries).
            </summary>
        </member>
        <member name="T:Volatile.VoltRayCast">
            <summary>
            A semi-precomputed ray optimized for fast AABB tests.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.GetEdge(System.Int32,Volatile.Vector2@,Volatile.Vector2@)">
            <summary>
            Gets the vertices defining an edge of the polygon.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.GetWorldAxis(System.Int32)">
            <summary>
            Returns the axis at the given index.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.ContainsPoint(Volatile.Vector2)">
            <summary>
            A world-space point query, used as a shortcut in collision tests.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.ContainsPointPartial(Volatile.Vector2,Volatile.Vector2)">
            <summary>
            Special case that ignores axes pointing away from the normal.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.RayCast(Volatile.VoltRayCast@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A cheap ray test that requires some precomputed information.
            Adapted from: http://www.cs.utah.edu/~awilliam/box/box.pdf
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.QueryPoint(Volatile.Vector2)">
            <summary>
            Performs a point test on the AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.QueryCircleApprox(Volatile.Vector2,System.Single)">
            <summary>
            Note: This doesn't take rounded edges into account.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.CircleCastApprox(Volatile.VoltRayCast@,System.Single)">
            <summary>
            Note: This doesn't take rounded edges into account.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.DisallowDynamic(Volatile.VoltBody,Volatile.VoltBody)">
            <summary>
            A predefined filter that disallows collisions between dynamic bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.TryGetSpace(System.Int32,Volatile.Vector2@,Volatile.Vector2@)">
            <summary>
            Tries to get a reference frame for a given number of ticks behind 
            the current tick. Returns true if a value was found, false if a
            value was not found (in which case we clamp to the nearest).
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.AssignHistory(Volatile.HistoryBuffer)">
            <summary>
            Initializes the buffer for storing past body states/spaces.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.StoreState">
            <summary>
            Stores a snapshot of this body's current state/space to a tick.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.GetState(System.Int32)">
            <summary>
            Retrieves a snapshot of the body's state/space at a tick.
            Logs an error and defaults to the current state if it can't be found.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.IsStatic">
            <summary>
            Static objects are considered to have infinite mass and cannot move.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.IsInWorld">
            <summary>
            If we're doing historical queries or tests, the body may have since
            been removed from the world.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.UserData">
            <summary>
            For attaching arbitrary data to this body.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.Angle">
            <summary>
            Current angle in radians.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryAABBOnly(Volatile.VoltAABB,System.Int32)">
            <summary>
            Checks if an AABB overlaps with our AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryPoint(Volatile.Vector2,System.Int32,System.Boolean)">
            <summary>
            Checks if a point is contained in this body. 
            Begins with AABB checks unless bypassed.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryCircle(Volatile.Vector2,System.Single,System.Int32,System.Boolean)">
            <summary>
            Checks if a circle overlaps with this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@,System.Int32,System.Boolean)">
            <summary>
            Performs a ray cast check on this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.CircleCast(Volatile.VoltRayCast@,System.Single,Volatile.VoltRayResult@,System.Int32,System.Boolean)">
            <summary>
            Performs a circle cast check on this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.PartialReset">
            <summary>
            Used for saving the body as part of another structure. The body
            will retain all geometry data and associated metrics, but its
            position, velocity, forces, and all related history will be cleared.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.Reset">
            <summary>
            Full reset. Clears out all data for pooling. Call FreeShapes() first.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.OnPositionUpdated">
            <summary>
            Applies the current position and angle to shapes and the AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.UpdateAABB">
            <summary>
            Builds the AABB by combining all the shape AABBs.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.Integrate">
            <summary>
            Computes forces and dynamics and applies them to position and angle.
            </summary>
        </member>
        <member name="M:Volatile.VoltBuffer`1.Add(`0)">
            <summary>
            Adds a new element to the end of the list. Returns the index of the
            newly-indexed object.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.UserData">
            <summary>
            For attaching arbitrary data to this shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.AABB">
            <summary>
            The world-space bounding AABB for this shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Area">
            <summary>
            Total area of the shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Mass">
            <summary>
            Total mass of the shape (area * density).
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Inertia">
            <summary>
            Total inertia of the shape relative to the body's origin.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.QueryPoint(Volatile.Vector2)">
            <summary>
            Checks if a point is contained in this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.QueryCircle(Volatile.Vector2,System.Single)">
            <summary>
            Checks if a circle overlaps with this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@)">
            <summary>
            Performs a raycast check on this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.CircleCast(Volatile.VoltRayCast@,System.Single,Volatile.VoltRayResult@)">
            <summary>
            Performs a circlecast check on this shape. 
            Begins with an AABB check.
            </summary>
        </member>
    </members>
</doc>
